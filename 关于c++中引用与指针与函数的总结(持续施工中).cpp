1.引用
    引用定义::
    '''引用就是给对象起了另外的名字,注意引用必须初始化'''
    int i = 1024;
    int &refi = i; //refi指向i,也就是i的引用
    refi = 2;      //给refi赋值,相当于是给i赋值
    int &refi1 = refi; //refi1指向的是refi指向的i,也就是说绑定到了i上
    //注意引用不是对象,所以不存在引用的引用

2.指针
    指针定义:
    '''
    储存另一个变量的地址的变量称为指针
    指针本身是一种特殊变量，只不过储存的数据是地址
    指针也是间接的对其他对象的访问,但是与引用有两个区别
    1.指针本身就是一个对象,允许对指针进行赋值和拷贝,他可以先后指向不同的对象
    2.指针不需要初始化也可以存在,他会拥有一个不确定的值
    '''
        未初始化定义:
        int *ip1, *ip2;  //ip1和ip2都是指向int型对象的指针
        double dp, *dp2; //dp2是指向double型对象的指针,dp是double型对象
        初始化定义:
        int i = 42;
        int *p = &i //p存放i的地址,也就是说p是指向i的指针,所以用(&:取地址符)
    访问对象:
    //指针储存的实际上是地址,那么如何访问地址对应的变量呢,用*解引用符来访问
    int i = 42;
    int *p = &i;  
    cout << *p; //由符号*得到指针p所指的对象,输出42
    //如果给解引用的结果赋值,实际上就是给指针所指的对象赋值
    *p = 0;
    cout << *p; //输出0
    //注意，如果指针未初始化,也就代表这个地址上实际上未存在对象,那么无法使用解引用的操作
    指针赋值:
    int i = 42;
    int *p = 0; //pi被初始化，但没有指向任何对象
    int *pi2 = &i; //pi2被初始化，存了i的地址
    int *pi3； //pi3未被初始化
    pi3 = pi2 //现在他们指向同一个对象了
    pi = &ival //pi指向ival
    *pi = 0; //pi指向的对象的值被改变了


    


    



